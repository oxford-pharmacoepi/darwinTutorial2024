---
pagetitle: "DrugUtilisation"
format:
  revealjs: 
    theme: [simple, styleOU.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: "Conducting 'Off-The-Shelf' Characterization Studies Using DARWIN EU Tools and the OMOP CDM"
execute:
  echo: true
  eval: true
  warning: false
  output-width: 100%
editor: visual
---

# DrugUtilisation

Drug cohort creation

## Introduction

Drug utilisation studies (DUS) were defined by the World Health Organization as studying the marketing, distribution, prescription, and use of medicinal products in a society, with special emphasis on the resulting medical and socioeconomic consequences (WHO, 2003).

. . .

This package aims to standardise and provide the tools to conduct Drug Utilisation studies as of the Darwin-EU Catalogue of Standard Analytics.

![](https://www.darwin-eu.org/templates/rt_horizon/custom/images/darwin-eu-logo.png){fig-align="center" width="45%"}

## Content

-   Cohort creation

-   **Summarise dose usage**

-   **Summarise indications**

-   **Summarise treatment persistence**

-   **Summarise drug restart and drug switching**

-   **Summarise treatments**

## The package

<br>

```{r, eval=FALSE}
install.packages("DrugUtilisation")
```

<br>

-   [v0.7.1](https://cran.r-project.org/package=DrugUtilisation) on cran.

-   [package website](https://darwin-eu-dev.github.io/DrugUtilisation/)

-   [Report an issue/Feature request](https://github.com/darwin-eu-dev/DrugUtilisation/issues/new)

## Create a reference to a cdm object

```{r, eval=FALSE}
dbPath <- here::here("darwinTutorialTest.duckdb")
options(timeout = 600)
download.file(
  url = "https://github.com/oxford-pharmacoepi/darwinTutorial2024/raw/refs/heads/main/database/darwinTutorialTest.duckdb",
  destfile = dbPath,
  mode = "wb",
  method = "auto",
  quiet = FALSE,
  extra = list(progressfunction = function(downloaded, total) {
    progress <- min(1, downloaded/total)
    cli::cli_progress_update(id = pb, set = progress)
  })
)
```


```{r, echo=FALSE}
dbPath <- '/Users/martics/Documents/GitHub/darwinTutorial2024/database/darwinTutorialTest.duckdb'
```

```{r}
library(duckdb)
library(CDMConnector)
library(dplyr)
library(here)

db <- dbConnect(duckdb(), dbdir = dbPath)
cdm <- cdmFromCon(con = db, cdmSchema = "public", writeSchema = "results")
```

## Generate the drug cohort

```{r, message=FALSE}
library(CodelistGenerator)
library(DrugUtilisation)
codelist <- getDrugIngredientCodes(cdm = cdm, name = "nitroglycerin")
cdm <- generateDrugUtilisationCohortSet(
  cdm = cdm,
  name = "dus_cohort",
  conceptSet = codelist,
  gapEra = 30
)
```

## Drug usage

```{r}
result <- cdm$dus_cohort |>
  summariseDrugUtilisation(
    ingredientConceptId = 1361711, 
    conceptSet = codelist,
    indexDate = "cohort_start_date",
    censorDate = "cohort_end_date", 
    restrictIncident = TRUE, 
    gapEra = 30, 
    numberExposures = TRUE, 
    numberEras = TRUE, 
    exposedTime = TRUE, 
    timeToExposure = FALSE, 
    initialQuantity = TRUE, 
    cumulativeQuantity = TRUE, 
    initialDailyDose = TRUE, 
    cumulativeDose = TRUE,
    estimates = c("q25", "median", "q75")
  )
```

## Drug usage

```{r}
result |>
  suppress(minCellCount = 5) |>
  tableDrugUtilisation()
```

## Indications

`summariseIndication()`:

-   To summarise **mutually exclusive** indications.

-   Define a window respect to the 'cohort_start_date'.

-   Indications must be instantiated beforehand as cohorts.

-   Unknown indication (check a table to see if there is a record).

## Indications

Let's instantiate the cohorts of interest:

```{r}
cdm <- generateConceptCohortSet(
  cdm = cdm,
  conceptSet = list(
    arteriosclerosis = 317576, 
    myocardial_infarction = 4329847, 
    pain = getCandidateCodes(cdm = cdm, keywords = "pain")$concept_id
  ),
  name = "indications",
  limit = "all",
  end = 0
)
```

## Indciations

```{r}
result <- cdm$dus_cohort |>
  summariseIndication(
    indicationCohortName = "indications", 
    indicationWindow = list(c(0, 0), c(-30, 7)), 
    unknownIndicationTable = "condition_occurrence"
  )
result |>
  glimpse()
```

## Indications

```{r}
result |>
  suppress() |>
  tableIndication()
```

## Indications

```{r}
plotIndication(result)
```

## Indications

Output of ploting functions are **ggplot2** objects.

. . .

```{r}
plotIndication(result) +
  ggplot2::theme(legend.position = "none")
```

## Indications

Currently considering to add support for **plotly**.

. . .

```{r}
plotIndication(result) |>
  plotly::ggplotly()
```

## Treatment persistence

To analyse treatment persistence and adherence there are two standard pipelines:

-   Survival analysis (implemented in the [CohortSurvival](https://cran.r-project.org/package=CohortSurvival) package)

-   Proportion of patients covered

## Proportion of patients covered

Proportion of treated individuals between index date and `followUpDays`. Percentages will be reported daily.

```{r}
result <- cdm$dus_cohort |>
  summariseProportionOfPatientsCovered(followUpDays = 90)
```

## Proportion of patients covered

```{r}
tableProportionOfPatientsCovered(result)
```

## Proportion of patients covered

```{r}
plotProportionOfPatientsCovered(result)
```

. . .

`gapEra` parameter can have a big impact in survival analysis, whereas it does not have such big impact on proportion of patients covered.

## Your turn

Can you create a cohort of a certain ingredient and analyse its persistence in the following year?

*suggestions: 'clopidogrel', 'nitroglycerin', 'simvastatin', 'amlodipine', 'verapamil' are the 5 most common ingredients in this database*

## Result

```{r, echo=FALSE}
cdm <- generateIngredientCohortSet(
  cdm = cdm, 
  name = "persistence", 
  ingredient = c('clopidogrel', 'nitroglycerin', 'simvastatin', 'amlodipine', 'verapamil')
)
result <- cdm$persistence |>
  summariseProportionOfPatientsCovered(followUpDays = 365)
plotProportionOfPatientsCovered(result, colour = "group_level")
```

## Drug restart and drug switching

We have the ability to study drug restart or drug switching after a discontinuation:

-   Switching cohorts must be defined in advance.

-   We have to define the windows of interest.

-   Index date will be the date of discontinuation.

-   Reported percentages in each window will be:

-   *Restart*: individuals that restarted and not switched.

-   *Switch*: individuals that switched and not restarted.

-   *Restart and switch*: individuals that restarted and switched.

-   *Untreated*: individuals that did not restart or switch.

## Drug restart and drug switching

Let's define the cohorts of interest for switching:

```{r}
cdm <- generateIngredientCohortSet(
  cdm = cdm,
  name = "switch",
  ingredient = c("clopidogrel", "simvastatin", "warfarin")
)
```

## Drug restart and drug switching

We have to be careful with the inclusion criteria of the input cohort, as restart is derived from it.

. . .

```{r}
result <- cdm$dus_cohort |>
  summariseDrugRestart(
    switchCohortTable = "switch", 
    followUpDays = c(90, 180, 270, 360), 
    restrictToFirstDiscontinuation = TRUE
  )
result |>
  glimpse()
```

## Drug restart and drug switching

```{r}
tableDrugRestart(result)
```

## Drug restart and drug switching

```{r}
plotDrugRestart(result)
```

## Summarise treatments

`summariseTreatment()` is a general function to analyse presence of treatments (cohorts) after an index date. This can be used with many different purposes:

- Summarise treatments after a certain condition

- Analyse comedications

- Analyse treatments after discontinuation

- ...

## Summarise treatments

You have to instantiate the treatments that you are interested in a cohort:

```{r}
cdm <- generateIngredientCohortSet(
  cdm = cdm,
  name = "treatments",
  ingredient = c("clopidogrel", "simvastatin", "warfarin", "nitroglycerin")
)
result <- cdm$dus_cohort |>
  summariseTreatment(
    window = list(c(1, 90), c(91, 180), c(181, 270), c(271, 360)), 
    treatmentCohortName = "treatments", 
    indexDate = "cohort_end_date", 
    censorDate = NULL
  )
result |>
  glimpse()
```

## Summarise treatments

```{r}
tableTreatment(result)
```

## Summarise treatments

```{r}
plotTreatment(result)
```
