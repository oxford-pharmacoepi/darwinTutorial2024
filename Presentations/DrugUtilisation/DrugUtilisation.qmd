---
pagetitle: "DrugUtilisation"
format:
  revealjs: 
    theme: [simple, styleOU.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: "Conducting 'Off-The-Shelf' Characterization Studies Using DARWIN EU Tools and the OMOP CDM"
execute:
  echo: true
  eval: true
  warning: false
  output-width: 100%
editor: visual
---

# DrugUtilisation {.title-slide}

```{r, echo=FALSE}
options(width = 110)
```

::: {style="margin-top: 25px;"}
:::

Conduct Drug Utilisation Studies using the OMOP Common Data Model

::: title-slide-logos
<img src="images/hexticker.png" alt="Logo 1" class="logo"/> <img src="images/logoHDS.png" alt="Logo 2" class="logo"/>
:::

## Introduction

Drug utilisation studies (DUS) were defined by the World Health Organization as studying the marketing, distribution, prescription, and use of medicinal products in a society, with special emphasis on the resulting medical and socioeconomic consequences (WHO, 2003).

. . .

This package aims to standardise and provide the tools to conduct Drug Utilisation studies as of the Darwin-EU Catalogue of Standard Analytics.

![](https://www.darwin-eu.org/templates/rt_horizon/custom/images/darwin-eu-logo.png){fig-align="center" width="45%"}

## Functionalities

-   Create cohort of drug user

-   Identify potential indications

-   Summarise drug use

-   Identify alternative treatments

-   Analyse treatment discontinuation

-   Proportion of patients covered

## Create a reference to a cdm object

For this example we are going to use

```{r}
library(DBI)
library(duckdb)
library(CDMConnector)
library(dplyr)
library(here)

db <- dbConnect(duckdb(), dbdir = eunomia_dir())
cdm <- cdmFromCon(con = db, cdmSchema = "main", writeSchema = "main")
```

## Fix eunomia problems with drugs

Add a drug_strength table:

```{r}
x <- read.csv("https://raw.githubusercontent.com/darwin-eu-dev/DrugUtilisation/main/extras/mock_drug_strength.csv")
cdm <- insertTable(cdm = cdm, name = "drug_strength", table = x)
```

. . .

Fix quantity:

```{r}
cdm$drug_exposure <- cdm$drug_exposure |>
  mutate(quantity = days_supply) |>
  compute(name = "drug_exposure", temporary = FALSE)
```

## Generate a drug cohort

To generate a drug cohort we need a conceptSet (named list of concepts). Each element will be a different cohort, so we can instantiate multiple cohorts following the same logit at the same time.

Methods to create a conceptSet:

-   read it from JSON [CodelistGenerator::codesFromConceptSet](https://darwin-eu.github.io/CodelistGenerator/reference/codesFromConceptSet.html)

-   create from an ingredient [CodelistGenerator::getDrugIngredientCodes](https://darwin-eu.github.io/CodelistGenerator/reference/getDrugIngredientCodes.html)

-   create from a text search [CodelistGenerator::getCandidateCodes](https://darwin-eu.github.io/CodelistGenerator/reference/getCandidateCodes.html)

-   custom creation

. . .

```{r}
codelist <- list(concept1 = c(1, 2, 3, 4), concept2 = c(3, 4, 5))
codelist
```

. . .

```{r}
codelist |> omopgenerics::newCodelist()
```

## Generate a drug cohort

For this example we are going to use all records of `acteaminophen`:

. . .

```{r}
library(CodelistGenerator)
codelist <- getDrugIngredientCodes(cdm, "acetaminophen")
codelist
```

## Generate a drug cohort

Once we have our conceptSet we can create a simple cohort:

. . .

```{r, message=FALSE}
library(DrugUtilisation)
cdm <- generateDrugUtilisationCohortSet(
  cdm = cdm,
  name = "dus_cohort",
  conceptSet = codelist
)
```

. . .

The results is the cdm object with the new cohort instantiated.

. . .

```{r, message=TRUE}
cdm
```

. . .

```{r}
cdm$dus_cohort
```

## Generate a drug cohort

We can check some metadata of the cohort:

```{r}
settings(cdm$dus_cohort)
```

. . .

```{r}
cohortCount(cdm$dus_cohort)
```

## Generate a drug cohort

```{r}
attrition(cdm$dus_cohort)
```

## Generate a drug cohort

```{r}
summary(cdm$dus_cohort)
```

## Generate a drug cohort

Let's explore the parameters:

```{r, eval = FALSE}
?generateDrugUtilisationCohortSet
```

. . .

![](arguments.png)

## Generate a drug cohort

![](step1_darwin.png){fig-align="center"}

## Generate a drug cohort

![](step2_darwin.png){fig-align="center"}

## Generate a drug cohort

![](step3_darwin.png){fig-align="center"}

## Generate a drug cohort

![](step4_darwin.png){fig-align="center"}

## Generate a drug cohort

![](step5_darwin.png){fig-align="center"}

## Generate a drug cohort

. . .

```{r, message=FALSE}
cdm <- generateDrugUtilisationCohortSet(
  cdm = cdm,
  name = "dus_cohort",
  conceptSet = codelist,
  gapEra = 30
)

cdm$dus_cohort <- cdm$dus_cohort |>
  requirePriorDrugWashout(365) |>
  requireObservationBeforeDrug(365) |>
  requireDrugInDateRange(as.Date(c("2000-01-01", "2019-12-31"))) |>
  requireIsFirstDrugEntry()
```

## Generate a drug cohort

. . .

```{r}
settings(cdm$dus_cohort) |> glimpse()
```

## Generate a drug cohort

. . .

```{r}
cohortCount(cdm$dus_cohort) |> glimpse()
```

## Generate a drug cohort

. . .

```{r}
attrition(cdm$dus_cohort) |>
  glimpse()
```

## Generate a drug cohort

. . .

```{r}
cohortCodelist(cdm$dus_cohort, cohortId = 1)
```

## Generate a drug cohort

```{r}
library(CohortCharacteristics)
cdm$dus_cohort |>
  summariseCohortAttrition() |>
  plotCohortAttrition()
```

## Some helpers

. . .

```{r, eval = FALSE}
?generateIngredientCohortSet
```

<br>

. . .

```{r, eval = FALSE}
?generateAtcCohortSet
```

# Characterisation

## Characterise drug use

We have a function to add columns related to drugUse:

```{r}
cdm$dus_cohort |>
  addDrugUse(
    ingredientConceptId = 1125315,
    duration = FALSE,
    quantity = FALSE,
    dose = FALSE
  )
```

`number_exposure` and `number_eras` are always computed.

## Characterise drug use

`duartion = TRUE` adds duration and impute_duration_percentage fields

. . .

```{r}
cdm$dus_cohort |>
  addDrugUse(
    ingredientConceptId = 1125315,
    duration = TRUE,
    quantity = FALSE,
    dose = FALSE
  ) |>
  select(-c("number_exposures", "number_eras"))
```

## Characterise drug use

`quantity = TRUE` adds initial_quantity and cumulative_quantity fields

. . .

```{r}
cdm$dus_cohort |>
  addDrugUse(
    ingredientConceptId = 1125315,
    duration = FALSE,
    quantity = TRUE,
    dose = FALSE
  ) |>
  select(-c("number_exposures", "number_eras"))
```

## Characterise drug use

`dose = TRUE` adds impute_daily_dose_percentage, initial_daily_dose and cumulative_dose fields

. . .

```{r}
cdm$dus_cohort |>
  addDrugUse(
    ingredientConceptId = 1125315,
    duration = FALSE,
    quantity = FALSE,
    dose = TRUE
  ) |>
  select(-c("number_exposures", "number_eras"))
```

## Characterise drug use

We can make some decisions to solve how we threat gaps (not exposed periods):

![](eraJoinMode.png)

## Characterise drug use

![](overlpaMode.png)

## Characterise drug use

```{r}
cdm$dus_cohort |>
  addDrugUse(
    ingredientConceptId = 1125315,
    eraJoinMode = "zero",
    sameIndexMode = "sum"
  )
```

## Characterise drug use

We can summarise all this information grouped by cohorts in a summarisedResult object:

. . .

```{r}
cdm$dus_cohort |>
  addDrugUse(ingredientConceptId = 1125315) |>
  summariseDrugUse() |>
  select(-"strata_name", -"strata_level") |>
  print(n = Inf)
```



## Indication

First we need to instantiate some indication cohorts, in this case we are going to explore `sinusitis` and `bronchitis`:

. . .

```{r}
cdm <- generateConceptCohortSet(
  cdm = cdm,
  conceptSet = list(sinusitis = c(4294548, 40481087, 257012), bronchitis = c(258780, 260139)),
  name = "indications",
  limit = "all",
  end = 0
)
settings(cdm$indications) |>
  select("cohort_definition_id", "cohort_name") |>
  inner_join(cohortCount(cdm$indications), by = "cohort_definition_id")
```

## Indication

We have to define a gap (period before index date) that we are interested to assess indication:

![](gapIndication.png)

## Indication

```{r}
cdm$dus_cohort <- cdm$dus_cohort |>
  addIndication(
    indicationCohortName = "indications",
    unknownIndicationTable = c("condition_occurrence"),
    indicationWindow = list(c(0, 0), c(-30, 0), c(-Inf, 0))
  )
glimpse(cdm$dus_cohort)
```

## Indication

Summarise indication into a summarisedResult object:

```{r}
cdm$dus_cohort |>
  summariseIndication(
    indicationCohortName = "indications",
    unknownIndicationTable = c("condition_occurrence"),
    indicationWindow = list(c(0, 0), c(-30, 0), c(-Inf, 0))
  ) |>
  select("variable_name", "variable_level", "estimate_name", "estimate_value") |>
  print(n = Inf)
```

## Alternative treatments

You can summarise other treatments after a certain cohort, for example we have our cohort of `acetaminophen`, which are the treatments that are used.

. . .

```{r}
cdm <- generateDrugUtilisationCohortSet(
  cdm = cdm,
  name = "all_ingredients",
  conceptSet = getDrugIngredientCodes(cdm = cdm)
)
```

## Alternative treatments

```{r}
x <- cdm$dus_cohort |>
  summariseTreatment(
    treatmentCohortName = "all_ingredients",
    window = list(c(0, 90), c(91, 180), c(181, 270), c(271, 360))
  )
x |>
  select("variable_name", "estimate_name", "estimate_value", "additional_name", "additional_level")
```

## Alternative treatments

```{r}
plotTreatment(x) +
  ggplot2::theme(legend.position = "none")
```

## Treatment discontinuation

We are working on a treatment discontinuation where we use the CohortSurvival package that we will see later.

. . .

```{r, echo = FALSE}
cdm2 <- CohortSurvival::mockMGUS2cdm()

MGUS_death <- CohortSurvival::estimateSingleEventSurvival(cdm2,
  targetCohortTable = "mgus_diagnosis",
  targetCohortId = 1,
  outcomeCohortTable = "death_cohort",
  outcomeCohortId = 1
)

CohortSurvival::plotSurvival(MGUS_death)
```

## Proportion of patients covered

```{r}
ppcSummary <- cdm$dus_cohort |>
  summariseProportionOfPatientsCovered(followUpDays = 90)

ppcSummary |>
  glimpse()
```

## Proportion of patients covered

```{r}
plotProportionOfPatientsCovered(ppcSummary)
```
