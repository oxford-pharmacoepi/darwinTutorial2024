---
title: "CohortCharacteristics"
subtitle: "Characterise cohorts"
format:
  revealjs: 
    theme: [simple, styleOU.scss]
    incremental: true   
    slide-number: true
    chalkboard: true
    preview-links: auto
    margin: 0.07
    code-link: true
    code-line-numbers: false
    height: 900
    width: 1600
    footer: "Conducting 'Off-The-Shelf' Characterization Studies Using DARWIN EU Tools and the OMOP CDM"
execute:
  echo: true
  eval: true
  output-width: 100%
editor: visual
---

## CohortCharacteristics

![](https://github.com/darwin-eu-dev/CohortCharacteristics/blob/main/man/figures/logo.png?raw=true){fig-align="center"}

## Context

```{r, echo = FALSE}
options(width = 120)
```

. . .

This package aims to standardise and provide the tools to conduct Characterisation studies as of the Darwin-EU Catalogue of Standard Analytics.

![](https://www.benzifoundation.org/wp-content/uploads/2023/09/eu-darwin-1.png){fig-align="center"}

## Package overview

-   [v0.3.0 on cran](https://CRAN.R-project.org/package=CohortCharacteristics)

-   [package website](https://darwin-eu-dev.github.io/CohortCharacteristics/)

. . .

![](https://github.com/darwin-eu-dev/CohortCharacteristics/blob/main/man/figures/logo.png?raw=true){fig-align="center" width="5.5in"}

## Functions

-   [summariseCohortCount](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortCount.html)

-   [**summariseCohortAttrition**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortAttrition.html)

-   [**summariseCharacteristics**](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html)

-   [summariseLargeScaleCharacteristics](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html)

-   [summariseCohortOverlap](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortOverlap.html)

-   [summariseCohortTiming](https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortTiming.html)

## Workflow

We have three types of functions:

-   **summarise**: these functions produce an standardised output to summarise a cohort. This standard output is called summarised_result.

-   **plot**: these functions produce plots (currently, only ggplot, but working to implement plotly) from a summarised_result object.

-   **table**: these functions produce tables (gt and flextable) from a summarised_result object.

. . .

```{r, eval = FALSE}
result <- summariseXXX(...)
```

. . .

```{r, eval = FALSE}
tableXXX(result)
```

. . .

```{r, eval = FALSE}
plotXXX(result)
```

. . .

```{mermaid}
%%| echo: false
flowchart LR
  A[summarise function ] --> B[Plot function ]
  A --> C[Table function ]
```

## Create the cdm reference

::: {.scrollable-content}
This is a lot of text inside the scrollable area. You can add as much content as you want here, and it will be scrollable within the specified height.

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent vel ligula scelerisque, fermentum dolor sed, pharetra velit. Nunc molestie urna ut velit convallis, vel congue metus hendrerit. Fusce vitae mi at odio vehicula vulputate. Sed tempor mi sit amet turpis aliquet, nec viverra nisl sollicitudin.
More content...

Vestibulum ullamcorper orci ut malesuada sagittis. Donec nec eros in odio scelerisque condimentum. Nulla facilisi. Donec dapibus dignissim nunc, ut ullamcorper est auctor ut.
:::

## Create the cdm reference

```{r}
library(CDMConnector)
library(duckdb)

db <- dbConnect(duckdb(),  eunomiaDir())
cdm <- cdmFromCon(con = db, cdmSchema = "main", writeSchema = "main")
```

```{r, message=TRUE}
cdm
```

## summariseCohortAttrition

Let's use our prior drug cohorts:

```{r}
library(CodelistGenerator)
library(DrugUtilisation)
codelist <- getDrugIngredientCodes(cdm = cdm, name = "acetaminophen", nameStyle = "{concept_name}")
cdm <- generateDrugUtilisationCohortSet(
  cdm = cdm,
  name = "dus_cohort",
  conceptSet = codelist,
  gapEra = 30
)
cdm$dus_cohort <- cdm$dus_cohort |>
  requirePriorDrugWashout(days = 180) |>
  requireObservationBeforeDrug(days = 180) |>
  requireDrugInDateRange(dateRange = as.Date(c("1980-01-01", "2019-12-31")))
```

## summariseCohortAttrition

. . .

`summariseCohortAttrition` extracts the data from `attrition(cdm$dus_dus_cohort)` in a standard format:

. . .

```{r}
library(CohortCharacteristics)
result <- summariseCohortAttrition(cdm$dus_cohort)
result |>
  dplyr::glimpse()
```

. . .

```{r}
settings(result)
```

## brief mention of summaried_result

<summarised_result> object consist on the main table that we have seen + a table of settings.

-   **bind** Join multiple results objects.

-   **settings** Read the settings of the result object.

-   **suppress** Suppress the results to counts less than a certain number.

-   **exportSummarisedResult** Export the result object to a csv file.

-   **importSummarisedResult** Import a result object from a csv file.

## tableCohortAttrition

. . .

::: {.scrollable-content}
```{r}
tableCohortAttrition(result)
```
:::

## Export the gt table

[gt](https://gt.rstudio.com/) tables can easily be exported:

```{r, eval=FALSE}
tab <- tableCohortAttrition(result)
gt::gtsave(tab, "myTable.docx/html/pdf/png")
```

## flextable is also supported

```{r}
tableCohortAttrition(result, type = "flextable")
```

## plotCohortAttrition

. . .

```{r, eval=FALSE}
plotCohortAttrition(result)
```

. . .

```{r, echo=FALSE}
plotCohortAttrition(result)
```

## Export the attrition plot

The output is a [DiagrammeR](https://rich-iannone.github.io/DiagrammeR/) object:

```{r, eval=FALSE}
plt <- plotCohortAttrition(result)
svg <- DiagrammeRsvg::export_svg(plt)
DiagrammeRsvg::rsvg_png(DiagrammeRsvg::charToRaw(svg), file = "attrition.png")
```

## SummariseCharacteristics

[**summariseCharacteristics()**](https://darwin-eu-dev.github.io/CohortCharacteristics/reference/summariseCharacteristics.html) summarises the demographics of the cohort by default, but you can use the intersect arguments to evaluate:

-   Number of visits
-   Presence of medicines or conditions
-   ...

. . .

You need to instantiate the medications and/or conditions of interest in a cohort table.

## Let's instantiate some cohorts

```{r}
library(DrugUtilisation)
library(CodelistGenerator)
codelist <- getDrugIngredientCodes(cdm = cdm, name = c("warfarin", "acetaminophen", "morphine"), nameStyle = "{concept_name}")
cdm <- generateDrugUtilisationCohortSet(
  cdm = cdm,
  name = "medications",
  conceptSet = codelist
)
cdm <- generateConceptCohortSet(
  cdm = cdm, 
  conceptSet =list(
    "antineoplastic_and_immunomodulating_agents" = c(1118088, 1118084, 40224132, 19010482, 40224805, 19007333, 1500211, 1305058, 1503184, 19134077, 1549786),
    "musculoskeletal_system" = c(1118088, 1557272, 40162359, 1124300, 1115008, 40173590, 1118084, 42707627, 19019273, 19019979, 19078461, 19003953, 1112807, 1115171, 1177480),
    "antiinfectives_for_systemic_use" = c(19129655, 1728416, 920293, 19074841, 920300, 920334, 19074843, 19075001, 19073183, 19073188, 1713671, 1729720, 19006318, 1778162, 46275444, 1717327, 1738521, 1741122, 1759842, 1713332, 1746114, 1768849, 46233710, 19133873, 46233988, 19133905),
    "nervous_system" = c(708298, 701322, 723013, 1129625, 1110410, 753626, 1124957, 1102527, 1125315, 782043, 791967, 1119510, 19078219, 757627, 40220386, 740275, 40223774, 1154029, 1127078, 1127433, 40222846, 19057271, 40223768, 45892894, 705944, 715997, 19078924, 19076374, 19077572, 40229134, 19059056, 19016749, 40236446, 19074679, 742185, 40231925, 1112807, 35605858, 40162522, 782047, 19039298, 19059528, 836654, 836659, 19115351, 19023398, 19002770, 19123231, 19133768, 40165015),
    "dermatologicals" = c(1129625, 1149380, 1124300, 836654, 1595799, 975125, 19008572),
    "respiratory_system" = c(1129625, 1149196, 1149380, 1150770, 1150836, 1153428, 1107830, 1110410, 738818, 1124957, 40169216, 1125443, 1119510, 1137529, 1154615, 1154343, 40223821, 19019979, 19112599, 40223834, 43012036, 40229134, 19029476, 19078461, 40232448, 1177480, 1192710, 1343916, 1150771, 1150837, 1107882, 975125, 1174888, 40169281, 40228214, 40228230, 19125062)
  ),
  name = "conditions",
  end = 0,
  limit = "all"
)
```

## summariseCharacteristics

```{r}
result <- cdm$dus_cohort |>
  PatientProfiles::addSex() |>
  summariseCharacteristics(
    strata = list("sex"),
    demographics = TRUE,
    ageGroup = list(c(0, 19), c(20, 39), c(40, 59), c(60, 79), c(80, Inf)),
    tableIntersectCount = list(
      "Number visits prior year" = list(tableName = "visit_occurrence", window = c(-365, -1))
    ),
    cohortIntersectFlag = list(
      "Conditions any time prior" = list(targetCohortTable = "conditions", window = c(-Inf, -1)),
      "Medications prior year" = list(targetCohortTable = "medications", window = c(-365, -1))
    )
  )
result |>
  dplyr::glimpse()
```

## tableCharacteristics

```{r, eval=FALSE}
tableCharacteristics(result)
```

::: {.scrollable-content}
```{r, echo=FALSE}
tableCharacteristics(result)
```
:::

## tableCharacteristics

```{r, eval=FALSE}
tableCharacteristics(
  result,
  header = c("cdm_name", "sex"),
  groupColumn = c("cohort_name"),
  hide = c("table", "window", "value")
)
```

::: {.scrollable-content}
```{r, echo=FALSE}
tableCharacteristics(
  result,
  header = c("cdm_name", "sex"),
  groupColumn = c("cohort_name"),
  hide = c("table", "window", "value")
)
```
:::

## tableCharacteristics

```{r, eval=FALSE}
result |>
  dplyr::filter(!estimate_name %in% c("min", "max", "mean", "sd")) |>
  tableCharacteristics(
    header = c("cdm_name", "sex"),
    groupColumn = c("cohort_name"),
    hide = c("table", "window", "value")
  )
```

::: {.scrollable-content}
```{r, echo=FALSE}
result |>
  dplyr::filter(!estimate_name %in% c("min", "max", "mean", "sd")) |>
  tableCharacteristics(
    header = c("cdm_name", "sex"),
    groupColumn = c("cohort_name"),
    hide = c("table", "window", "value")
  )
```
:::
